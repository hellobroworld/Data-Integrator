Attribute VB_Name = "IntegrateModul"
Option Explicit

Sub ModIntegrate(wb As Workbook, dataObj As dataModel, options() As String, integrateReference() As String)
    Dim response As String
    
    Select Case options(1)
        Case cOPTBYKEY
            addByKey wb, dataObj
        Case cOPTBYATTRIBUTE
            response = MsgBox("This macro will change data according to the matched attributes in table " & integrateReference(2) _
                & Chr(10) & "Are you sure that you have matched every attribute correct?", vbYesNo, "Before you start")
    
            If response = vbYes Then
                integrateByKey wb, integrateReference, dataObj
            End If
        Case Else
            MsgBox "Please dont change autogenerated data. You may restart the macro."
            onBug
            End
    End Select

End Sub

Sub addByKey(wb As Workbook, dataObj As dataModel)
    
    Dim wks As Worksheet
    
    Dim dontMatchKeyArray As Variant: dontMatchKeyArray = matchByKey(wb, dataObj.keyPair, False)     'Function in CompareModul
    Dim compareArray As Variant
    Dim attributesArray As Variant: attributesArray = dataObj.attributePairs
    Dim keyPair As keyPair: Set keyPair = dataObj.keyPair
    Dim compareKeyColumnIndices() As Integer: compareKeyColumnIndices = keyPair.compareKeyColumnIndices
    Dim baseTable As Variant
    Dim integrationArray As Variant
    
    Dim lengthIntegrateArray As Integer
    Dim widthIntegrateArray As Integer
    Dim length As Integer: length = UBound(dontMatchKeyArray)
    Dim i As Integer, k As Integer, j As Integer
    Dim row As Integer
    Dim baseIndex As Integer, otherIndex As Integer
    
    baseTable = dontMatchKeyArray(0)
    widthIntegrateArray = UBound(baseTable, 2) + 1
    For i = 1 To length
        If Not IsEmpty(dontMatchKeyArray(i)) Then
            lengthIntegrateArray = lengthIntegrateArray + UBound(dontMatchKeyArray(i))
        End If
    Next i
    lengthIntegrateArray = lengthIntegrateArray + 1     'to adjust for range output
    
    If lengthIntegrateArray > 1 Then
        ReDim integrationArray(1 To lengthIntegrateArray, 1 To widthIntegrateArray)
        For j = 1 To widthIntegrateArray    'add Header
            integrationArray(1, j) = baseTable(0, j - 1)
        Next j
        'integrate compare tables
        For i = 1 To length
            
            compareArray = dontMatchKeyArray(i)
            'fil in keys
            If Not IsEmpty(compareArray) Then
                For k = 2 To UBound(compareArray) + 1
                    integrationArray(row + k, keyPair.baseKeyColumnIndex + 1) = compareArray(k - 1, compareKeyColumnIndices(i))
                Next k
        
                'fil in attributes
                If Not IsEmpty(attributesArray) Then
                    For j = 0 To UBound(attributesArray)
                        baseIndex = attributesArray(j, 0, 0) + 1    '+ 1 for range
                        otherIndex = attributesArray(j, i, 0)
                        For k = 1 To UBound(compareArray)       'befüllt Spalte im integration array
                            integrationArray(row + k + 1, baseIndex) = compareArray(k, otherIndex)
                        Next k
                    Next j
                    row = k - 1
                End If
            End If
        Next i
    End If

    Set wks = wb.Sheets.Add
    
    With wks
        nameWks wb, wks, "Integrate in " & removeFirstPartFromString(CStr(keyPair.baseTableName))
        If lengthIntegrateArray > 1 Then
            .Range(.Cells(1, 1), .Cells(lengthIntegrateArray, widthIntegrateArray)).Value2 = integrationArray
            .Rows.RowHeight = 15
            .ListObjects.Add xlSrcRange, .Range(.Cells(1, 1), .Cells(lengthIntegrateArray, widthIntegrateArray)), False, xlYes
        Else
            With .Cells(1, 1)
                .Value2 = "no integration values were found"
                .Font.Bold = True
                .Font.Size = 20
            End With
        End If
        
        linkMe wks, 2 + lengthIntegrateArray, 2
    End With
    
End Sub


Sub integrateByKey(wb As Workbook, integrateReference() As String, dataObj As dataModel)
    Dim integrateWB As Workbook
    Dim listObj As ListObject
    
    Dim attributes As Variant: attributes = dataObj.attributePairs
    Dim keyPair As keyPair: Set keyPair = dataObj.keyPair
    Dim compareKeyIndices() As Integer: compareKeyIndices = keyPair.compareKeyColumnIndices
    
    Dim matchedData As Variant: matchedData = matchByKey(wb, keyPair, True)
    Dim matchedDataset As Variant
    Dim baseTableKeyColumn As Variant
    
    Dim length As Integer: length = UBound(matchedData)
    Dim lengthMatchedDataSet As Integer
    Dim keyIndex As Integer
    
    Dim i As Integer, j As Integer, k As Integer
    
    If Not IsEmpty(attributes) Then
        Set integrateWB = getWbReference(integrateReference(0))
        Set listObj = integrateWB.Sheets(integrateReference(1)).ListObjects(integrateReference(2))
        With listObj
            baseTableKeyColumn = arraysStartWith0(.ListColumns(keyPair.baseKeyColumnName).DataBodyRange.Value2)
            
            For i = 1 To length
                matchedDataset = matchedData(i)
                
                For k = 0 To UBound(matchedDataset)
                    keyIndex = inArray(baseTableKeyColumn, matchedDataset(k, compareKeyIndices(i))) + 1
                    
                    For j = 0 To UBound(attributes)
                        .DataBodyRange.Cells(keyIndex, .ListColumns(attributes(j, 0, 1)).index).Interior.Color = RGB(0, 240, 0)
                        .DataBodyRange.Cells(keyIndex, .ListColumns(attributes(j, 0, 1)).index).Value2 = check(matchedDataset(k, attributes(j, i, 0)), "String")
                    Next j
                Next k
            Next i
        End With
    Else
        MsgBox "You did not set any attributes which could be matched."
    End If
End Sub
