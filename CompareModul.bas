Attribute VB_Name = "CompareModul"
Option Explicit

Sub ModeCompare(wb As Workbook, dataObj As dataModel, options() As String)

    Select Case options(1)
        Case cOPTBYKEY
            filCompareByKey wb, dataObj
        Case cOPTBYATTRIBUTE
            filCompareWithAttributes wb, dataObj
        Case Else
            MsgBox "Please dont change autogenerated data. You may restart the macro."
            onBug
            End
    End Select

End Sub

Sub filCompareByKey(wb As Workbook, dataObj As dataModel)
    Dim wks As Worksheet
    Dim dontMatchKeyArray As Variant: dontMatchKeyArray = matchByKey(wb, dataObj.keyPair, False)
    Dim keyPair As keyPair: Set keyPair = dataObj.keyPair
    Dim compareArray As Variant
    Dim compareTableNames() As String
    
    Dim lengthCompareArray As Integer
    Dim widthCompareArray As Integer
    
    Dim i As Integer
    compareTableNames = keyPair.compareTableNames
    For i = 1 To UBound(dontMatchKeyArray)
        compareArray = dontMatchKeyArray(i)
        Set wks = wb.Worksheets.Add
        With wks
            nameWks wb, wks, "Compare vs " & removeFirstPartFromString(compareTableNames(i))
            If IsEmpty(compareArray) Then
                .Cells(1, 1).Value2 = "No differences were found"
                .Cells(1, 1).Font.Bold = True
                .Cells(1, 1).Font.Size = 20

            Else
                lengthCompareArray = UBound(compareArray) + 1
                widthCompareArray = UBound(compareArray, 2) + 1
                
                .Range(.Cells(1, 1), .Cells(lengthCompareArray, widthCompareArray)).Value2 = compareArray
                .ListObjects.Add xlSrcRange, .Range(.Cells(1, 1), .Cells(lengthCompareArray, widthCompareArray)), False, xlYes
                .Rows.RowHeight = 15

            End If
            
            linkMe wks, 2 + lengthCompareArray, 2
        End With
    Next i
End Sub

Sub filCompareWithAttributes(wb As Workbook, dataObj As dataModel)
    Dim wks As Worksheet
    Dim data As Variant: data = retrieveHDIData(wb, dataObj.keyPair)
    Dim attributes As Variant: attributes = dataObj.attributePairs          '3 Dim Array (1: Attributes, 2: Tables, 3: {Index of Attribute, ColumnName}
    Dim keyPair As keyPair: Set keyPair = dataObj.keyPair
    Dim compareKeyColumnIndices() As Integer: compareKeyColumnIndices = keyPair.compareKeyColumnIndices
    Dim compareTableNames() As String: compareTableNames = keyPair.compareTableNames
    Dim baseTable As Variant
    Dim baseKeyColumn As Variant
    Dim compareTable As Variant
    
    Dim rangeArray As Variant
    Dim colorArray As Variant
    Dim outputArray As Variant
    
    Dim colorCondititon As Boolean
    Dim keyIndex As Integer
    Dim length As Integer, numberOfAttributes
    Dim lengthRangeArray As Integer: lengthRangeArray = 1
    Dim widthBaseTable As Integer
    Dim i As Integer, j As Integer, k As Integer
    
    length = UBound(data)
    numberOfAttributes = UBound(attributes)
    baseTable = data(0)
    baseKeyColumn = getColumnFromMatrix(baseTable, keyPair.baseKeyColumnIndex)
    widthBaseTable = UBound(baseTable, 2) + 1
    
    ReDim outputArray(0 To length, 0 To 1)
    For i = 1 To length
        compareTable = data(i)
        For k = 1 To UBound(compareTable)
            If Not IsEmpty(compareTable(k, compareKeyColumnIndices(i))) Then
                keyIndex = inArray(baseKeyColumn, check(compareTable(k, compareKeyColumnIndices(i)), "String"))
                If keyIndex <> -1 Then
                    For j = 0 To numberOfAttributes
                        If check(baseTable(keyIndex, attributes(j, 0, 0)), "String") <> check(compareTable(k, attributes(j, i, 0)), "String") Then
                            lengthRangeArray = lengthRangeArray + 1
                            j = numberOfAttributes
                        End If
                    Next j
                End If
            End If
        Next k
        
        ReDim rangeArray(1 To lengthRangeArray, 1 To widthBaseTable)        'to include header
        ReDim colorArray(1 To lengthRangeArray, 0 To numberOfAttributes)
        
        If lengthRangeArray > 1 Then
            lengthRangeArray = 1                    'to jump over header
            For j = 0 To widthBaseTable - 1         'input header
                rangeArray(1, j + 1) = baseTable(0, j)
            Next j
            
            For k = 1 To UBound(compareTable)                                       'k = 1 to not iterate through header
                If Not IsEmpty(compareTable(k, compareKeyColumnIndices(i))) Then
                    keyIndex = inArray(baseKeyColumn, check(compareTable(k, compareKeyColumnIndices(i)), "String"))
                
                    If keyIndex <> -1 Then
                        For j = 0 To numberOfAttributes
                            If check(baseTable(keyIndex, attributes(j, 0, 0)), "String") <> check(compareTable(k, attributes(j, i, 0)), "String") Then
                                colorCondititon = True
                                j = numberOfAttributes
                            End If
                        Next j
                        If colorCondititon Then
                            lengthRangeArray = lengthRangeArray + 1
                            rangeArray(lengthRangeArray, keyPair.baseKeyColumnIndex + 1) = compareTable(k, compareKeyColumnIndices(i))     'to include key column
                            For j = 0 To numberOfAttributes
                                If check(baseTable(keyIndex, attributes(j, 0, 0)), "String") <> check(compareTable(k, attributes(j, i, 0)), "String") Then
                        
                                    colorArray(lengthRangeArray, j) = attributes(j, 0, 0) + 1           '+1 to adjust for ranges in excel
                                End If
                                rangeArray(lengthRangeArray, attributes(j, 0, 0) + 1) = compareTable(k, attributes(j, i, 0))
                            Next j
                            colorCondititon = False
                        End If
                    End If
                End If
            Next k
            lengthRangeArray = 1
        End If
        outputArray(i, 0) = rangeArray
        outputArray(i, 1) = colorArray
    Next i
    
    
    For i = 1 To length
        rangeArray = outputArray(i, 0)
        Set wks = wb.Sheets.Add
        nameWks wb, wks, cMODCOMPARE & " vs " & removeFirstPartFromString(compareTableNames(i))
    
        With wks
            If IsEmpty(rangeArray) Then
                .Cells(1, 1).Value2 = "No differences were found"
                formatCells wks, 1, 1, 1
            Else
                lengthRangeArray = UBound(rangeArray)
                .Cells(1, 1) = "Values which differ from " & removeFirstPartFromString(keyPair.baseTableName) & " table are colored"
                formatCells wks, 1, 1, 1
                .Range(.Cells(3, 1), .Cells(lengthRangeArray + 2, widthBaseTable)).Value2 = rangeArray
                .ListObjects.Add xlSrcRange, .Range(.Cells(3, 1), .Cells(lengthRangeArray + 2, widthBaseTable)), False, xlYes
                .Rows.RowHeight = 15
                colorArray = outputArray(i, 1)
                For k = 1 To lengthRangeArray
                    For j = 0 To numberOfAttributes
                        If Not IsEmpty(colorArray(k, j)) Then
                            .Cells(k + 2, colorArray(k, j)).Interior.Color = RGB(0, 0, 0)
                            .Cells(k + 2, colorArray(k, j)).Font.Color = RGB(0, 253, 0)
                        End If
                    Next j
                Next k
            End If
            
            linkMe wks, 5 + lengthRangeArray, 2
        End With
    Next i
End Sub

Function matchByKey(wb As Workbook, keyPair As keyPair, shouldMatch As Boolean) As Variant
    Dim returnArray As Variant
    
    Dim hdiData As Variant: hdiData = retrieveHDIData(wb, keyPair)
    
    Dim baseTable As Variant
    Dim baseTableKeyColumn As Variant
    
    Dim matchTable As Variant
    Dim matchKeyIndex As Integer

    Dim compareKeyColumnIndeces
    
    Dim length As Integer: length = UBound(keyPair.compareTableNames, 1)
    Dim i As Integer
    
    baseTable = hdiData(0)
    baseTableKeyColumn = getColumnFromMatrix(baseTable, keyPair.baseKeyColumnIndex)

    ReDim returnArray(0 To length)
    returnArray(0) = baseTable
    compareKeyColumnIndeces = keyPair.compareKeyColumnIndices
    For i = 1 To length
        matchTable = hdiData(i)
        matchKeyIndex = compareKeyColumnIndeces(i)
        
        If shouldMatch Then
            returnArray(i) = filterArray(matchTable, "filterMatchKey", Array(matchKeyIndex, baseTableKeyColumn))
        Else
            returnArray(i) = filterArray(matchTable, "filterNotMatchKey", Array(matchKeyIndex, baseTableKeyColumn))
        End If
    Next i
    
    matchByKey = returnArray
End Function

Function filterNotMatchKey(arr As Variant, arg As Variant) As Boolean
    If inArray(arg(1), arr(arg(0))) = -1 Then                       'arg(0) is index of key column and arg(1) is compare array of keys
        filterNotMatchKey = True
    Else
        filterNotMatchKey = False
    End If
End Function

Function filterMatchKey(arr As Variant, arg As Variant) As Boolean
    If inArray(arg(1), arr(arg(0))) <> -1 Then                       'arg(0) is index of key column and arg(1) is compare array of keys
        filterMatchKey = True
    Else
        filterMatchKey = False
    End If
End Function
